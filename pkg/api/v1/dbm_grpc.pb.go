// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DbmServiceClient is the client API for DbmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbmServiceClient interface {
	// StartLocalDatabase starts a Database on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the dbm/config.yaml
	//   3. all bytes constituting the Database YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDatabase(ctx context.Context, opts ...grpc.CallOption) (DbmService_StartLocalDatabaseClient, error)
	// StartFromPreviousDatabase starts a new Database based on a previous one.
	// If the previous Database does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDatabase(ctx context.Context, in *StartFromPreviousDatabaseRequest, opts ...grpc.CallOption) (*StartDatabaseResponse, error)
	// StartDatabaseRequest starts a new Database based on its specification.
	StartDatabase(ctx context.Context, in *StartDatabaseRequest, opts ...grpc.CallOption) (*StartDatabaseResponse, error)
	// Searches for Database(s) known to this Database
	ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error)
	// Subscribe listens to new Database(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (DbmService_SubscribeClient, error)
	// GetDatabase retrieves details of a single Database
	GetDatabase(ctx context.Context, in *GetDatabaseRequest, opts ...grpc.CallOption) (*GetDatabaseResponse, error)
	// Listen listens to Database updates and log output of a running Database
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (DbmService_ListenClient, error)
	// StopDatabase stops a currently running Database
	StopDatabase(ctx context.Context, in *StopDatabaseRequest, opts ...grpc.CallOption) (*StopDatabaseResponse, error)
}

type dbmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbmServiceClient(cc grpc.ClientConnInterface) DbmServiceClient {
	return &dbmServiceClient{cc}
}

func (c *dbmServiceClient) StartLocalDatabase(ctx context.Context, opts ...grpc.CallOption) (DbmService_StartLocalDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &DbmService_ServiceDesc.Streams[0], "/v1.DbmService/StartLocalDatabase", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbmServiceStartLocalDatabaseClient{stream}
	return x, nil
}

type DbmService_StartLocalDatabaseClient interface {
	Send(*StartLocalDatabaseRequest) error
	CloseAndRecv() (*StartDatabaseResponse, error)
	grpc.ClientStream
}

type dbmServiceStartLocalDatabaseClient struct {
	grpc.ClientStream
}

func (x *dbmServiceStartLocalDatabaseClient) Send(m *StartLocalDatabaseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dbmServiceStartLocalDatabaseClient) CloseAndRecv() (*StartDatabaseResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartDatabaseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbmServiceClient) StartFromPreviousDatabase(ctx context.Context, in *StartFromPreviousDatabaseRequest, opts ...grpc.CallOption) (*StartDatabaseResponse, error) {
	out := new(StartDatabaseResponse)
	err := c.cc.Invoke(ctx, "/v1.DbmService/StartFromPreviousDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbmServiceClient) StartDatabase(ctx context.Context, in *StartDatabaseRequest, opts ...grpc.CallOption) (*StartDatabaseResponse, error) {
	out := new(StartDatabaseResponse)
	err := c.cc.Invoke(ctx, "/v1.DbmService/StartDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbmServiceClient) ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error) {
	out := new(ListDatabasesResponse)
	err := c.cc.Invoke(ctx, "/v1.DbmService/ListDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbmServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (DbmService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DbmService_ServiceDesc.Streams[1], "/v1.DbmService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbmServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbmService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type dbmServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *dbmServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbmServiceClient) GetDatabase(ctx context.Context, in *GetDatabaseRequest, opts ...grpc.CallOption) (*GetDatabaseResponse, error) {
	out := new(GetDatabaseResponse)
	err := c.cc.Invoke(ctx, "/v1.DbmService/GetDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbmServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (DbmService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &DbmService_ServiceDesc.Streams[2], "/v1.DbmService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbmServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbmService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type dbmServiceListenClient struct {
	grpc.ClientStream
}

func (x *dbmServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbmServiceClient) StopDatabase(ctx context.Context, in *StopDatabaseRequest, opts ...grpc.CallOption) (*StopDatabaseResponse, error) {
	out := new(StopDatabaseResponse)
	err := c.cc.Invoke(ctx, "/v1.DbmService/StopDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbmServiceServer is the server API for DbmService service.
// All implementations must embed UnimplementedDbmServiceServer
// for forward compatibility
type DbmServiceServer interface {
	// StartLocalDatabase starts a Database on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the dbm/config.yaml
	//   3. all bytes constituting the Database YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDatabase(DbmService_StartLocalDatabaseServer) error
	// StartFromPreviousDatabase starts a new Database based on a previous one.
	// If the previous Database does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDatabase(context.Context, *StartFromPreviousDatabaseRequest) (*StartDatabaseResponse, error)
	// StartDatabaseRequest starts a new Database based on its specification.
	StartDatabase(context.Context, *StartDatabaseRequest) (*StartDatabaseResponse, error)
	// Searches for Database(s) known to this Database
	ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error)
	// Subscribe listens to new Database(s) updates
	Subscribe(*SubscribeRequest, DbmService_SubscribeServer) error
	// GetDatabase retrieves details of a single Database
	GetDatabase(context.Context, *GetDatabaseRequest) (*GetDatabaseResponse, error)
	// Listen listens to Database updates and log output of a running Database
	Listen(*ListenRequest, DbmService_ListenServer) error
	// StopDatabase stops a currently running Database
	StopDatabase(context.Context, *StopDatabaseRequest) (*StopDatabaseResponse, error)
	mustEmbedUnimplementedDbmServiceServer()
}

// UnimplementedDbmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDbmServiceServer struct {
}

func (UnimplementedDbmServiceServer) StartLocalDatabase(DbmService_StartLocalDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalDatabase not implemented")
}
func (UnimplementedDbmServiceServer) StartFromPreviousDatabase(context.Context, *StartFromPreviousDatabaseRequest) (*StartDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousDatabase not implemented")
}
func (UnimplementedDbmServiceServer) StartDatabase(context.Context, *StartDatabaseRequest) (*StartDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDatabase not implemented")
}
func (UnimplementedDbmServiceServer) ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedDbmServiceServer) Subscribe(*SubscribeRequest, DbmService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDbmServiceServer) GetDatabase(context.Context, *GetDatabaseRequest) (*GetDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabase not implemented")
}
func (UnimplementedDbmServiceServer) Listen(*ListenRequest, DbmService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedDbmServiceServer) StopDatabase(context.Context, *StopDatabaseRequest) (*StopDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDatabase not implemented")
}
func (UnimplementedDbmServiceServer) mustEmbedUnimplementedDbmServiceServer() {}

// UnsafeDbmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbmServiceServer will
// result in compilation errors.
type UnsafeDbmServiceServer interface {
	mustEmbedUnimplementedDbmServiceServer()
}

func RegisterDbmServiceServer(s grpc.ServiceRegistrar, srv DbmServiceServer) {
	s.RegisterService(&DbmService_ServiceDesc, srv)
}

func _DbmService_StartLocalDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DbmServiceServer).StartLocalDatabase(&dbmServiceStartLocalDatabaseServer{stream})
}

type DbmService_StartLocalDatabaseServer interface {
	SendAndClose(*StartDatabaseResponse) error
	Recv() (*StartLocalDatabaseRequest, error)
	grpc.ServerStream
}

type dbmServiceStartLocalDatabaseServer struct {
	grpc.ServerStream
}

func (x *dbmServiceStartLocalDatabaseServer) SendAndClose(m *StartDatabaseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dbmServiceStartLocalDatabaseServer) Recv() (*StartLocalDatabaseRequest, error) {
	m := new(StartLocalDatabaseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DbmService_StartFromPreviousDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbmServiceServer).StartFromPreviousDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DbmService/StartFromPreviousDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbmServiceServer).StartFromPreviousDatabase(ctx, req.(*StartFromPreviousDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbmService_StartDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbmServiceServer).StartDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DbmService/StartDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbmServiceServer).StartDatabase(ctx, req.(*StartDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbmService_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbmServiceServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DbmService/ListDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbmServiceServer).ListDatabases(ctx, req.(*ListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbmService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbmServiceServer).Subscribe(m, &dbmServiceSubscribeServer{stream})
}

type DbmService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type dbmServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *dbmServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DbmService_GetDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbmServiceServer).GetDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DbmService/GetDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbmServiceServer).GetDatabase(ctx, req.(*GetDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbmService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbmServiceServer).Listen(m, &dbmServiceListenServer{stream})
}

type DbmService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type dbmServiceListenServer struct {
	grpc.ServerStream
}

func (x *dbmServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DbmService_StopDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbmServiceServer).StopDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DbmService/StopDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbmServiceServer).StopDatabase(ctx, req.(*StopDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DbmService_ServiceDesc is the grpc.ServiceDesc for DbmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DbmService",
	HandlerType: (*DbmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousDatabase",
			Handler:    _DbmService_StartFromPreviousDatabase_Handler,
		},
		{
			MethodName: "StartDatabase",
			Handler:    _DbmService_StartDatabase_Handler,
		},
		{
			MethodName: "ListDatabases",
			Handler:    _DbmService_ListDatabases_Handler,
		},
		{
			MethodName: "GetDatabase",
			Handler:    _DbmService_GetDatabase_Handler,
		},
		{
			MethodName: "StopDatabase",
			Handler:    _DbmService_StopDatabase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalDatabase",
			Handler:       _DbmService_StartLocalDatabase_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DbmService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _DbmService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dbm.proto",
}
