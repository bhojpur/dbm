syntax = "proto3";

package v1;
option go_package = "github.com/bhojpur/dbm/pkg/api/v1";
import "google/protobuf/timestamp.proto";

service DbmService {
    // StartLocalDatabase starts a Database on the Bhojpur.NET Platform directly.
    // The incoming requests are expected in the following order:
    //   1. metadata
    //   2. all bytes constituting the dbm/config.yaml
    //   3. all bytes constituting the Database YAML that will be executed (that the config.yaml points to)
    //   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
    //   5. the Bhojpur.NET Platform application tar stream done marker
    rpc StartLocalDatabase(stream StartLocalDatabaseRequest) returns (StartDatabaseResponse) {};

    // StartFromPreviousDatabase starts a new Database based on a previous one.
    // If the previous Database does not have the can-replay condition set this call will result in an error.
    rpc StartFromPreviousDatabase(StartFromPreviousDatabaseRequest) returns (StartDatabaseResponse) {};

    // StartDatabaseRequest starts a new Database based on its specification.
    rpc StartDatabase(StartDatabaseRequest) returns (StartDatabaseResponse) {};

    // Searches for Database(s) known to this Database
    rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse) {};

    // Subscribe listens to new Database(s) updates
    rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {};

    // GetDatabase retrieves details of a single Database
    rpc GetDatabase(GetDatabaseRequest) returns (GetDatabaseResponse) {};

    // Listen listens to Database updates and log output of a running Database
    rpc Listen(ListenRequest) returns (stream ListenResponse) {};

    // StopDatabase stops a currently running Database
    rpc StopDatabase(StopDatabaseRequest) returns (StopDatabaseResponse) {};
}

message StartLocalDatabaseRequest {
    oneof content {
        DatabaseMetadata metadata = 1;
        bytes config_yaml = 2;
        bytes database_yaml = 3;
        bytes application_tar = 4;
        bool application_tar_done = 5;
    };
}

message StartDatabaseResponse {
    DatabaseStatus status = 1;
}

message StartDatabaseRequest {
    DatabaseMetadata metadata = 1;
    string database_path = 2;
    bytes database_yaml = 3;
    bytes sideload = 4; 
    google.protobuf.Timestamp wait_until = 5;
    string name_suffix = 6;
}

message StartFromPreviousDatabaseRequest {
    string previous_database = 1;
    string gitops_token = 2;
    google.protobuf.Timestamp wait_until = 3;
}

message ListDatabasesRequest {
    repeated FilterExpression filter = 1;
    repeated OrderExpression order = 2;
    int32 start = 3;
    int32 limit = 4;
}

message FilterExpression {
    repeated FilterTerm terms = 1;
}

message FilterTerm {
    string field = 1;
    string value = 2;
    FilterOp operation = 3;
    bool negate = 4;
}

enum FilterOp {
    OP_EQUALS = 0;
    OP_STARTS_WITH = 1;
    OP_ENDS_WITH = 2;
    OP_CONTAINS = 3;
    OP_EXISTS = 4;
}

message OrderExpression {
    string field = 1;
    bool ascending = 2;
}

message ListDatabasesResponse {
    int32 total = 1;
    repeated DatabaseStatus result = 2;
}

message SubscribeRequest {
    repeated FilterExpression filter = 1;
}

message SubscribeResponse {
    DatabaseStatus result = 1;
}

message GetDatabaseRequest {
    string name = 1;
}

message GetDatabaseResponse {
    DatabaseStatus result = 1;
}

message ListenRequest {
    string name = 1;
    bool updates = 2;
    ListenRequestLogs logs = 3;
}

enum ListenRequestLogs {
    LOGS_DISABLED = 0;
    LOGS_UNSLICED = 1;
    LOGS_RAW = 2;
    LOGS_HTML = 3;
}

message ListenResponse {
    oneof content {
        DatabaseStatus update = 1;
        LogSliceEvent slice = 2;
    };
}

message DatabaseStatus {
    string name = 1;
    DatabaseMetadata metadata = 2;
    DatabasePhase phase = 3;
    DatabaseConditions conditions = 4;
    string details = 5;
    repeated DatabaseResult results = 6;
}

message DatabaseMetadata {
    string owner = 1;
    Repository repository = 2;
    DatabaseTrigger trigger = 3;
    google.protobuf.Timestamp created = 4;
    google.protobuf.Timestamp finished = 5;
    repeated Annotation annotations = 6;
    string database_spec_name = 7;
}

message Repository {
    string host = 1;
    string owner = 2;
    string repo = 3;
    string ref = 4;
    string revision = 5;
}

message Annotation {
    string key = 1;
    string value = 2;
}

enum DatabaseTrigger {
    TRIGGER_UNKNOWN = 0;
    TRIGGER_MANUAL = 1;
    TRIGGER_PUSH = 2;
    TRIGGER_DELETED = 3;
}

enum DatabasePhase {
    // Unknown means we don't know what state the Database is in
    PHASE_UNKNOWN = 0;

    // Preparing means the Database hasn't started yet and isn't consuming resources in the system
    PHASE_PREPARING = 1;

    // Starting means the Database has been scheduled and is waiting to run. Things that might prevent it
	// from running already are pod scheduling, image pull or container startup.
    PHASE_STARTING = 2;

    // Running means the Database is actually running and doing work.
    PHASE_RUNNING = 3;

    // Done means the Database has run and is finished
    PHASE_DONE = 4;

    // Cleaning means the Database is in post-run cleanup
    PHASE_CLEANUP = 5;

    // Waiting means the Database is waiting for its start time or some other condition to be met
    PHASE_WAITING = 6;
}

message DatabaseConditions {
    bool success = 1;
    int32 failure_count = 2;
    bool can_replay = 3;
    google.protobuf.Timestamp wait_until = 4;
    bool did_execute = 5;
}

message DatabaseResult {
    string type = 1;
    string payload = 2;
    string description = 3;
    repeated string channels = 4;
}

message LogSliceEvent {
    string name = 1;
    LogSliceType type = 2;
    string payload = 3;
}

enum LogSliceType {
    SLICE_ABANDONED = 0;
    SLICE_PHASE = 1;
    SLICE_START = 2;
    SLICE_CONTENT = 3;
    SLICE_DONE = 4;
    SLICE_FAIL = 5;
    SLICE_RESULT = 6;
}

message StopDatabaseRequest {
    string name = 1;
}

message StopDatabaseResponse { }